<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-30T09:55:12.540Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>codeliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈Spring框架的IOC与AOP</title>
    <link href="http://yoursite.com/2018/05/30/IOC%E4%B8%8EAOP/"/>
    <id>http://yoursite.com/2018/05/30/IOC与AOP/</id>
    <published>2018-05-30T09:56:57.830Z</published>
    <updated>2018-05-30T09:55:12.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IOC(控制反转)又称依赖注入，是整个spring的核心，贯穿始终。学过Java的都知道，当我们需要使用一个对象的时候，首先得new object(),<br>我们需要关注对象的生命周期，什么时候创建，什么时候销毁都得自己来维护，例如数据库的连接对象，如果我们忘记关闭会造成很严重的问题。<br>这时候IOC的优势就显示出来了，我们把对象放到IOC容器中，需要的时候直接拿来用，用完的时候什么也不用管，这样是不是很方便省心？再通俗<br>一点就好比找对象，传统方法是到处去找符合我们要求的妹子然后发展，现在IOC相当于一个婚介所，各种各样的妹子都在IOC容器中登记，然后我<br>把我们的条件告诉婚介所，然后婚介所找到符合条件的妹子自动匹配给我们。  </p><p>下面来通过代码理解一下Spring是怎么运行的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;   </span><br><span class="line">        ApplicationContext context = new FileSystemXmlApplicationContext(   </span><br><span class="line">                &quot;applicationContext.xml&quot;);   </span><br><span class="line">        Animal animal = (Animal) context.getBean(&quot;animal&quot;);   </span><br><span class="line">        animal.say();   </span><br><span class="line">    &#125;</span><br><span class="line">```  </span><br><span class="line">这段代码大家应该都很熟悉吧，一步步讲解，先来看看 applicationContext.xml</span><br></pre></td></tr></table></figure></p><p><bean id="animal" class="phz.springframework.test.Cat"><br>        <property name="name" value="kitty"><br></property></bean><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个animal的实现类</span><br></pre></td></tr></table></figure></p><p>public class Cat implements Animal {<br>    private String name;<br>    public void say() {<br>        System.out.println(“I am “ + name + “!”);<br>    }<br>    public void setName(String name) {<br>        this.name = name;<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal接口</span><br></pre></td></tr></table></figure></p><p>public interface Animal {<br>    public void say();<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">很明显上面的代码输出“I am kitty !”,那么spring是怎么实现的，往下看，我们简单分析一下原理  </span><br><span class="line"> </span><br><span class="line">Spring开始加载配置文件的时候，会把信息保存再一个HashMap中，HashMap的key就是id,HashMap的value就是class,</span><br><span class="line">那么他还有一个name属性怎么办呢，其实这也会保存在一个HashMap中。</span><br></pre></td></tr></table></figure></p><p>Map&lt;String, String&gt; beans = new HashMap&lt;String, String&gt;();<br>beans.put(“animal”,”kitty”);<br>Map&lt;String, Object&gt; propertiesMap = new HashMap&lt;String, Object&gt;();<br>propertiesMap.put(“name”,”kitty”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接下来就是最核心的部分了，首先反射找到这个类和属性</span><br></pre></td></tr></table></figure></p><p>public static Object newInstance(String className) {<br>        Class&lt;?&gt; cls = null;<br>        Object obj = null;<br>        try {<br>            cls = Class.forName(className);<br>            obj = cls.newInstance();<br>        } catch (ClassNotFoundException e) {<br>            throw new RuntimeException(e);<br>        } catch (InstantiationException e) {<br>            throw new RuntimeException(e);<br>        } catch (IllegalAccessException e) {<br>            throw new RuntimeException(e);<br>        }<br>        return obj;<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接着将这个类的属性注入进去</span><br></pre></td></tr></table></figure></p><p>public static void setProperty(Object obj, String name, String value) {<br>        Class&lt;? extends Object&gt; clazz = obj.getClass();<br>        try {<br>            String methodName = returnSetMthodName(name);<br>            Method[] ms = clazz.getMethods();<br>            for (Method m : ms) {<br>                if (m.getName().equals(methodName)) {<br>                    if (m.getParameterTypes().length == 1) {<br>                        Class&lt;?&gt; clazzParameterType = m.getParameterTypes()[0];<br>                        setFieldValue(clazzParameterType.getName(), value, m,<br>                                obj);<br>                        break;<br>                    }<br>                }<br>            }<br>        } catch (SecurityException e) {<br>            throw new RuntimeException(e);<br>        } catch (IllegalArgumentException e) {<br>            throw new RuntimeException(e);<br>        } catch (IllegalAccessException e) {<br>            throw new RuntimeException(e);<br>        } catch (InvocationTargetException e) {<br>            throw new RuntimeException(e);<br>        }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最后再把这个类的实例返回给我们，我们就可以使用了</span><br></pre></td></tr></table></figure></p><p>if (value instanceof Map) {<br>                Iterator&lt;?&gt; entryIterator = ((Map&lt;?, ?&gt;) value).entrySet()<br>                        .iterator();<br>                Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();<br>                while (entryIterator.hasNext()) {<br>                    Entry&lt;?, ?&gt; entryMap = (Entry&lt;?, ?&gt;) entryIterator.next();<br>                    if (entryMap.getValue() instanceof String[]) {<br>                        map.put((String) entryMap.getKey(),<br>                                getBean(((String[]) entryMap.getValue())[0]));<br>                    }<br>                }<br>                BeanProcesser.setProperty(obj, property, map);<br>            }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">当然依赖注入不只就这么一点，这只是一个大致的思路，还需要慢慢研究理解。  </span><br><span class="line">  </span><br><span class="line">## AOP  </span><br><span class="line">AOP即面向切面编程，实现是使用的代理技术，简单说一下代理，例如我们上淘宝买东西用支付宝付款的时候，并没有面对面</span><br><span class="line">或卡对卡的把钱给了商家，而是把钱转给了支付宝，支付宝再代我们把钱转给商家，其实这时支付宝就是一个代理接口，他会</span><br><span class="line">根据订单自动从买家的账户扣到卖家的账户。下面用代码来理解一下。  </span><br><span class="line">首先我们有一个公共接口</span><br></pre></td></tr></table></figure></p><p>public interface IHello {<br>     /**</p><pre><code> * 业务方法 * @param str */void sayHello(String str);</code></pre><p> }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">接着我们有一个目标类实现了这个接口  </span><br><span class="line">```  </span><br><span class="line">public class Hello implements IHello&#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void sayHello(String str) &#123;</span><br><span class="line">         System.out.println(&quot;hello &quot;+str);</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;  </span><br><span class="line">```   </span><br><span class="line">此时我们new一个Hello对象可以实现主要业务的方法，但是我们还不满足，有时想要在方法前后都加日志以便维护，这时我们定义了</span><br><span class="line">一个Logger类  </span><br><span class="line">```  </span><br><span class="line">public class Logger &#123;</span><br><span class="line">     public static void start()&#123;</span><br><span class="line">         System.out.println(new Date()+ &quot; say hello start...&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     public static void end()&#123;</span><br><span class="line">         System.out.println(new Date()+ &quot; say hello end&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;  </span><br><span class="line">```  </span><br><span class="line">这样我们想打日志的时候就可以调用Logger类来打日志，但是我想打日志的情况有很多，每次都得单独调用一次吗，实际是不需要的</span><br><span class="line">，我们定义一个代理类，让代理类来打日志就可以了。  </span><br><span class="line">```  </span><br><span class="line">public class ProxyHello implements IHello&#123;    </span><br><span class="line">    private IHello hello;    </span><br><span class="line">    public ProxyHello(IHello hello) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello(String str) &#123;</span><br><span class="line">        Logger.start();//添加特定的方法</span><br><span class="line">        hello.sayHello(str);</span><br><span class="line">        Logger.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是测试类代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">         IHello hello = new ProxyHello(new Hello());//如果我们需要日志功能，则使用代理类</span><br><span class="line">         //IHello hello = new Hello();//如果我们不需要日志功能则使用目标类</span><br><span class="line">         hello.sayHello(&quot;明天&quot;);    </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;  </span><br><span class="line">```  </span><br><span class="line">这样虽然可以实现代理，但是如果有很多的业务都需要加日志那就得写好多代理类，太麻烦了。现在就需要动态代理</span><br><span class="line">技术了，我们需要哪个类加日志就代理哪个类。  </span><br><span class="line">动态代理得实现InvocationHandler接口  </span><br><span class="line">```  </span><br><span class="line">public class DynaProxyHello implements InvocationHandler&#123;</span><br><span class="line">      </span><br><span class="line">      private Object target;//目标对象</span><br><span class="line">      /**</span><br><span class="line">       * 通过反射来实例化目标对象</span><br><span class="line">       * @param object</span><br><span class="line">       * @return</span><br><span class="line">       */</span><br><span class="line">      public Object bind(Object object)&#123;</span><br><span class="line">         this.target = object;</span><br><span class="line">         return Proxy.newProxyInstance(this.target.getClass().getClassLoader(), this.target.getClass().getInterfaces(), this);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     @Override</span><br><span class="line">     public Object invoke(Object proxy, Method method, Object[] args)</span><br><span class="line">             throws Throwable &#123;</span><br><span class="line">         Object result = null;</span><br><span class="line">         Logger.start();//添加额外的方法</span><br><span class="line">         //通过反射机制来运行目标对象的方法</span><br><span class="line">         result = method.invoke(this.target, args);</span><br><span class="line">         Logger.end();</span><br><span class="line">         return result;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>测试类代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class DynaTest &#123;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">         IHello hello = (IHello) new DynaProxyHello().bind(new Hello());//如果我们需要日志功能，则使用代理类</span><br><span class="line">         //IHello hello = new Hello();//如果我们不需要日志功能则使用目标类</span><br><span class="line">         hello.sayHello(&quot;明天&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就实现了动态代理，但也是最简单的，后面还需要深入研究。  </p><p>本篇博客参考了很多其他大神的博客加自己的理解写出，其中很重要的知识点就是反射，这也是Java的一个精髓，如果有版权<br>侵犯，请与本人联系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IOC&quot;&gt;&lt;a href=&quot;#IOC&quot; class=&quot;headerlink&quot; title=&quot;IOC&quot;&gt;&lt;/a&gt;IOC&lt;/h2&gt;&lt;p&gt;IOC(控制反转)又称依赖注入，是整个spring的核心，贯穿始终。学过Java的都知道，当我们需要使用一个对象的时候，首先得new
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/26/hello-world/"/>
    <id>http://yoursite.com/2018/05/26/hello-world/</id>
    <published>2018-05-26T02:49:30.032Z</published>
    <updated>2018-05-26T06:45:10.956Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="ǰ��" scheme="http://yoursite.com/categories/j%EF%BF%BD%EF%BF%BD/"/>
    
    
  </entry>
  
</feed>
