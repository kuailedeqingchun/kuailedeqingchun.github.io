<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-31T01:41:46.759Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>codeliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈Spring框架的IOC与AOP</title>
    <link href="http://yoursite.com/2018/05/30/IOC%E4%B8%8EAOP/"/>
    <id>http://yoursite.com/2018/05/30/IOC与AOP/</id>
    <published>2018-05-30T09:56:57.830Z</published>
    <updated>2018-05-31T01:41:46.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IOC(控制反转)又称依赖注入，是整个spring的核心，贯穿始终。学过Java的都知道，当我们需要使用一个对象的时候，首先得new object(),我们需要关注对象的生命周期，什么时候创建，什么时候销毁都得自己来维护，例如数据库的连接对象，如果我们忘记关闭会造成很严重的问题。这时候IOC的优势就显示出来了，我们把对象放到IOC容器中，需要的时候直接拿来用，用完的时候什么也不用管，这样是不是很方便省心？再通俗一点就好比找对象，传统方法是到处去找符合我们要求的妹子然后发展，现在IOC相当于一个婚介所，各种各样的妹子都在IOC容器中登记，然后我把我们的条件告诉婚介所，然后婚介所找到符合条件的妹子自动匹配给我们。  </p><p>下面来通过代码理解一下Spring是怎么运行的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;   </span><br><span class="line">        ApplicationContext context = new FileSystemXmlApplicationContext(   </span><br><span class="line">                &quot;applicationContext.xml&quot;);   </span><br><span class="line">        Animal animal = (Animal) context.getBean(&quot;animal&quot;);   </span><br><span class="line">        animal.say();   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这段代码大家应该都很熟悉吧，一步步讲解，先来看看 applicationContext.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;animal&quot; class=&quot;phz.springframework.test.Cat&quot;&gt;   </span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;kitty&quot; /&gt;   </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>一个animal的实现类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Cat implements Animal &#123;   </span><br><span class="line">    private String name;   </span><br><span class="line">    public void say() &#123;   </span><br><span class="line">        System.out.println(&quot;I am &quot; + name + &quot;!&quot;);   </span><br><span class="line">    &#125;   </span><br><span class="line">    public void setName(String name) &#123;   </span><br><span class="line">        this.name = name;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Animal接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Animal &#123;   </span><br><span class="line">    public void say();   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很明显上面的代码输出“I am kitty !”,那么spring是怎么实现的，往下看，我们简单分析一下原理  </p><p>Spring开始加载配置文件的时候，会把信息保存再一个HashMap中，HashMap的key就是id,HashMap的value就是class,<br>那么他还有一个name属性怎么办呢，其实这也会保存在一个HashMap中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; beans = new HashMap&lt;String, String&gt;(); </span><br><span class="line">beans.put(&quot;animal&quot;,&quot;kitty&quot;);</span><br><span class="line">Map&lt;String, Object&gt; propertiesMap = new HashMap&lt;String, Object&gt;(); </span><br><span class="line">propertiesMap.put(&quot;name&quot;,&quot;kitty&quot;);</span><br></pre></td></tr></table></figure></p><p>接下来就是最核心的部分了，首先反射找到这个类和属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static Object newInstance(String className) &#123;   </span><br><span class="line">        Class&lt;?&gt; cls = null;   </span><br><span class="line">        Object obj = null;   </span><br><span class="line">        try &#123;   </span><br><span class="line">            cls = Class.forName(className);   </span><br><span class="line">            obj = cls.newInstance();   </span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;   </span><br><span class="line">            throw new RuntimeException(e);   </span><br><span class="line">        &#125; catch (InstantiationException e) &#123;   </span><br><span class="line">            throw new RuntimeException(e);   </span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;   </span><br><span class="line">            throw new RuntimeException(e);   </span><br><span class="line">        &#125;   </span><br><span class="line">        return obj;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>接着将这个类的属性注入进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static void setProperty(Object obj, String name, String value) &#123;   </span><br><span class="line">        Class&lt;? extends Object&gt; clazz = obj.getClass();   </span><br><span class="line">        try &#123;   </span><br><span class="line">            String methodName = returnSetMthodName(name);   </span><br><span class="line">            Method[] ms = clazz.getMethods();   </span><br><span class="line">            for (Method m : ms) &#123;   </span><br><span class="line">                if (m.getName().equals(methodName)) &#123;   </span><br><span class="line">                    if (m.getParameterTypes().length == 1) &#123;   </span><br><span class="line">                        Class&lt;?&gt; clazzParameterType = m.getParameterTypes()[0];   </span><br><span class="line">                        setFieldValue(clazzParameterType.getName(), value, m,   </span><br><span class="line">                                obj);   </span><br><span class="line">                        break;   </span><br><span class="line">                    &#125;   </span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125; catch (SecurityException e) &#123;   </span><br><span class="line">            throw new RuntimeException(e);   </span><br><span class="line">        &#125; catch (IllegalArgumentException e) &#123;   </span><br><span class="line">            throw new RuntimeException(e);   </span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;   </span><br><span class="line">            throw new RuntimeException(e);   </span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;   </span><br><span class="line">            throw new RuntimeException(e);   </span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后再把这个类的实例返回给我们，我们就可以使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (value instanceof Map) &#123;   </span><br><span class="line">                Iterator&lt;?&gt; entryIterator = ((Map&lt;?, ?&gt;) value).entrySet()   </span><br><span class="line">                        .iterator();   </span><br><span class="line">                Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();   </span><br><span class="line">                while (entryIterator.hasNext()) &#123;   </span><br><span class="line">                    Entry&lt;?, ?&gt; entryMap = (Entry&lt;?, ?&gt;) entryIterator.next();   </span><br><span class="line">                    if (entryMap.getValue() instanceof String[]) &#123;   </span><br><span class="line">                        map.put((String) entryMap.getKey(),   </span><br><span class="line">                                getBean(((String[]) entryMap.getValue())[0]));   </span><br><span class="line">                    &#125;   </span><br><span class="line">                &#125;   </span><br><span class="line">                BeanProcesser.setProperty(obj, property, map);   </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>当然依赖注入不只就这么一点，这只是一个大致的思路，还需要慢慢研究理解。  </p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP即面向切面编程，实现是使用的代理技术，简单说一下代理，例如我们上淘宝买东西用支付宝付款的时候，并没有面对面<br>或卡对卡的把钱给了商家，而是把钱转给了支付宝，支付宝再代我们把钱转给商家，其实这时支付宝就是一个代理接口，他会<br>根据订单自动从买家的账户扣到卖家的账户。下面用代码来理解一下。<br>首先我们有一个公共接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface IHello &#123;</span><br><span class="line">     /**</span><br><span class="line">      * 业务方法</span><br><span class="line">      * @param str</span><br><span class="line">      */</span><br><span class="line">     void sayHello(String str);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>接着我们有一个目标类实现了这个接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Hello implements IHello&#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void sayHello(String str) &#123;</span><br><span class="line">         System.out.println(&quot;hello &quot;+str);</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>此时我们new一个Hello对象可以实现主要业务的方法，但是我们还不满足，有时想要在方法前后都加日志以便维护，这时我们定义了<br>一个Logger类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Logger &#123;</span><br><span class="line">     public static void start()&#123;</span><br><span class="line">         System.out.println(new Date()+ &quot; say hello start...&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     public static void end()&#123;</span><br><span class="line">         System.out.println(new Date()+ &quot; say hello end&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们想打日志的时候就可以调用Logger类来打日志，但是我想打日志的情况有很多，每次都得单独调用一次吗，实际是不需要的，我们定义一个代理类，让代理类来打日志就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyHello implements IHello&#123;    </span><br><span class="line">    private IHello hello;    </span><br><span class="line">    public ProxyHello(IHello hello) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello(String str) &#123;</span><br><span class="line">        Logger.start();//添加特定的方法</span><br><span class="line">        hello.sayHello(str);</span><br><span class="line">        Logger.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是测试类代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">         IHello hello = new ProxyHello(new Hello());//如果我们需要日志功能，则使用代理类</span><br><span class="line">         //IHello hello = new Hello();//如果我们不需要日志功能则使用目标类</span><br><span class="line">         hello.sayHello(&quot;明天&quot;);    </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这样虽然可以实现代理，但是如果有很多的业务都需要加日志那就得写好多代理类，太麻烦了。现在就需要动态代理<br>技术了，我们需要哪个类加日志就代理哪个类。<br>动态代理得实现InvocationHandler接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class DynaProxyHello implements InvocationHandler&#123;</span><br><span class="line">      </span><br><span class="line">      private Object target;//目标对象</span><br><span class="line">      /**</span><br><span class="line">       * 通过反射来实例化目标对象</span><br><span class="line">       * @param object</span><br><span class="line">       * @return</span><br><span class="line">       */</span><br><span class="line">      public Object bind(Object object)&#123;</span><br><span class="line">         this.target = object;</span><br><span class="line">         return Proxy.newProxyInstance(this.target.getClass().getClassLoader(), this.target.getClass().getInterfaces(), this);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     @Override</span><br><span class="line">     public Object invoke(Object proxy, Method method, Object[] args)</span><br><span class="line">             throws Throwable &#123;</span><br><span class="line">         Object result = null;</span><br><span class="line">         Logger.start();//添加额外的方法</span><br><span class="line">         //通过反射机制来运行目标对象的方法</span><br><span class="line">         result = method.invoke(this.target, args);</span><br><span class="line">         Logger.end();</span><br><span class="line">         return result;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>测试类代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class DynaTest &#123;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">         IHello hello = (IHello) new DynaProxyHello().bind(new Hello());//如果我们需要日志功能，则使用代理类</span><br><span class="line">         //IHello hello = new Hello();//如果我们不需要日志功能则使用目标类</span><br><span class="line">         hello.sayHello(&quot;明天&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就实现了动态代理，但也是最简单的，后面还需要深入研究。  </p><p>本篇博客参考了很多其他大神的博客加自己的理解写出，其中很重要的知识点就是反射，这也是Java的一个精髓，如果有版权侵犯，请与本人联系。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IOC&quot;&gt;&lt;a href=&quot;#IOC&quot; class=&quot;headerlink&quot; title=&quot;IOC&quot;&gt;&lt;/a&gt;IOC&lt;/h2&gt;&lt;p&gt;IOC(控制反转)又称依赖注入，是整个spring的核心，贯穿始终。学过Java的都知道，当我们需要使用一个对象的时候，首先得new
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
