{"meta":{"title":"个人博客","subtitle":null,"description":null,"author":"codeliu","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"浅谈Spring框架的IOC与AOP","slug":"IOC与AOP","date":"2018-05-30T09:56:57.830Z","updated":"2018-05-31T01:35:18.354Z","comments":true,"path":"2018/05/30/IOC与AOP/","link":"","permalink":"http://yoursite.com/2018/05/30/IOC与AOP/","excerpt":"","text":"IOCIOC(控制反转)又称依赖注入，是整个spring的核心，贯穿始终。学过Java的都知道，当我们需要使用一个对象的时候，首先得new object(),我们需要关注对象的生命周期，什么时候创建，什么时候销毁都得自己来维护，例如数据库的连接对象，如果我们忘记关闭会造成很严重的问题。这时候IOC的优势就显示出来了，我们把对象放到IOC容器中，需要的时候直接拿来用，用完的时候什么也不用管，这样是不是很方便省心？再通俗一点就好比找对象，传统方法是到处去找符合我们要求的妹子然后发展，现在IOC相当于一个婚介所，各种各样的妹子都在IOC容器中登记，然后我把我们的条件告诉婚介所，然后婚介所找到符合条件的妹子自动匹配给我们。 下面来通过代码理解一下Spring是怎么运行的123456public static void main(String[] args) &#123; ApplicationContext context = new FileSystemXmlApplicationContext( &quot;applicationContext.xml&quot;); Animal animal = (Animal) context.getBean(&quot;animal&quot;); animal.say(); &#125; 这段代码大家应该都很熟悉吧，一步步讲解，先来看看 applicationContext.xml123&lt;bean id=&quot;animal&quot; class=&quot;phz.springframework.test.Cat&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;kitty&quot; /&gt; &lt;/bean&gt; 一个animal的实现类123456789public class Cat implements Animal &#123; private String name; public void say() &#123; System.out.println(&quot;I am &quot; + name + &quot;!&quot;); &#125; public void setName(String name) &#123; this.name = name; &#125; &#125; aaa","categories":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}],"tags":[],"keywords":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-26T02:49:30.032Z","updated":"2018-05-26T06:45:10.956Z","comments":true,"path":"2018/05/26/hello-world/","link":"","permalink":"http://yoursite.com/2018/05/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"ǰ��","slug":"j��","permalink":"http://yoursite.com/categories/j��/"}],"tags":[],"keywords":[{"name":"ǰ��","slug":"j��","permalink":"http://yoursite.com/categories/j��/"}]}]}